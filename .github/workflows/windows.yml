name: Windows RDP Setup

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'Select Ngrok Tunnel Region'
        required: true
        type: choice
        options:
        - "us"
        - "eu"
        - "ap"
        - "au"
        - "sa"
        - "jp"
        - "in"
        default: 'in'
      timeout:
        description: 'Session Timeout (minutes, max 360)'
        required: true
        type: string
        default: '360'

env:
  USERNAME: "Ashik"
  PASSWORD: "AshiksBeastServer2006"
  PC_NAME: "Ashik-PC"

jobs:
  rdp-session:
    runs-on: windows-latest
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure RDP & User
        shell: pwsh
        run: |
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          
          # Create user
          $securePass = ConvertTo-SecureString "$env:PASSWORD" -AsPlainText -Force
          New-LocalUser -Name "$env:USERNAME" -Password $securePass -FullName "$env:USERNAME"
          Add-LocalGroupMember -Group "Administrators" -Member "$env:USERNAME"
          
          # Set computer name
          $validName = $env:PC_NAME -replace '[^a-zA-Z0-9-]', '-'
          Rename-Computer -NewName $validName -Force
          Write-Host "Computer name set to: $validName"

      - name: Install Virtual Sound Card and Enable Audio
        shell: pwsh
        run: |
          choco install vb-cable -y --force
          Set-Service -Name Audiosrv -StartupType Automatic -PassThru | Start-Service
          Set-Service -Name AudioEndpointBuilder -StartupType Automatic -PassThru | Start-Service
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "fEnableAudioCapture" -Value 1 -Type DWord -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fDisableAudioCapture" -Value 0 -Type DWord -Force

      - name: Install Google Chrome and Set as Default
        shell: pwsh
        run: |
          $chromeInstaller = "chrome_installer.exe"
          $downloadUrl = "https://dl.google.com/chrome/install/latest/chrome_installer.exe"
          
          try {
              Invoke-WebRequest -Uri $downloadUrl -OutFile $chromeInstaller -ErrorAction Stop
          } catch {
              # Use a simple batch script without here-string
              $batchContent = @'
@echo off
start microsoft-edge:https://www.google.com/chrome/
timeout /t 10
exit
'@
              $batchContent | Out-File -FilePath "download_chrome.cmd" -Encoding ascii
              Start-Process -FilePath "download_chrome.cmd" -Wait
          }
          
          if (Test-Path $chromeInstaller) {
              Start-Process -FilePath $chromeInstaller -ArgumentList "/silent /install" -Wait
              Start-Sleep -Seconds 30
              $chromePath = "${env:ProgramFiles(x86)}\Google\Chrome\Application\chrome.exe"
              if (Test-Path $chromePath) {
                  reg add "HKCU\Software\Microsoft\Windows\Shell\Associations\UrlAssociations\http\UserChoice" /v ProgId /d "ChromeHTML" /f
                  reg add "HKCU\Software\Microsoft\Windows\Shell\Associations\UrlAssociations\https\UserChoice" /v ProgId /d "ChromeHTML" /f
              }
          }

      - name: Set Custom Wallpaper
        shell: pwsh
        run: |
          $wallpaperUrl = "https://4kwallpapers.com/images/wallpapers/windows-11-dark-mode-blue-stock-official-3840x2160-5630.jpg"
          $wallpaperPath = "$env:TEMP\wallpaper.jpg"
          Invoke-WebRequest -Uri $wallpaperUrl -OutFile $wallpaperPath
          Add-Type -TypeDefinition @"
using System;
using System.Runtime.InteropServices;
public class Wallpaper {
    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
}
"@
          [Wallpaper]::SystemParametersInfo(0x0014, 0, $wallpaperPath, 0x01) | Out-Null

      - name: Install jq
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "C:\ProgramData\chocolatey\bin" | Out-Null
          Invoke-WebRequest -Uri "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe" -OutFile "C:\ProgramData\chocolatey\bin\jq.exe"
          $env:Path += ";C:\ProgramData\chocolatey\bin"

      - name: Setup Ngrok Tunnel
        shell: pwsh
        run: |
          $REGION = "${{ github.event.inputs.region }}"
          $AUTH_TOKEN = "${{ secrets.NGROK_AUTH_TOKEN }}"
          # ... (rest of the ngrok setup remains the same)

      - name: Display Connection Details
        shell: pwsh
        run: |
          Write-Host "ðŸŽ¯ RDP Connection Details ðŸŽ¯"
          Write-Host "Address: $env:RDP_ADDRESS"
          Write-Host "Port: $env:RDP_PORT"
          Write-Host "Username: $env:USERNAME"
          Write-Host "Password: $env:PASSWORD"

      - name: Keep Workflow Alive
        shell: pwsh
        run: |
          Write-Host "Session active for ${{ github.event.inputs.timeout }} minutes"
          while ($true) {
              Start-Sleep -Seconds 60
          }
