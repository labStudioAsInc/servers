name: Windows VM

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'Select Ngrok Tunnel Region'
        required: true
        type: choice
        options:
        - "us"
        - "eu"
        - "ap"
        - "au"
        - "sa"
        - "jp"
        - "in"
        default: 'in'
      timeout:
        description: 'Session Timeout (minutes, max 360)'
        required: true
        type: string
        default: '360'
      username:
        description: 'Custom Username'
        required: true
        type: string
        default: 'Ashik'

jobs:
  rdp-session:
    runs-on: windows-latest
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- Windows Setup ---
      - name: Configure RDP & User on Windows
        shell: pwsh
        run: |
          $password = -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 20 | ForEach-Object { [char]$_ })
          echo "GENERATED_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          $securePass = ConvertTo-SecureString "$password" -AsPlainText -Force
          New-LocalUser -Name "${{ github.event.inputs.username }}" -Password $securePass -FullName "${{ github.event.inputs.username }}"
          Add-LocalGroupMember -Group "Administrators" -Member "${{ github.event.inputs.username }}"

      # --- NEW STEP: Install Virtual Sound Card and Enable Audio for Windows ---
      - name: Install Virtual Sound Card and Enable Audio
        shell: pwsh
        run: |
          echo "Installing VB-CABLE Virtual Audio Device using Chocolatey..."
          # Using --force to ensure installation even if a previous attempt failed or package exists
          choco install vb-cable -y --force
          
          echo "Enabling Windows Audio Services..."
          Set-Service -Name Audiosrv -StartupType Automatic -PassThru | Start-Service
          Set-Service -Name AudioEndpointBuilder -StartupType Automatic -PassThru | Start-Service
          
          echo "Configuring Group Policy for RDP Audio Redirection..."
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services' -Name "fEnableAudioCapture" -Value 1 -Type DWord -Force
          Set-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "fDisableAudioCapture" -Value 0 -Type DWord -Force
          
          echo "Audio setup is complete."

      - name: Install Google Chrome and Set as Default
        shell: pwsh
        run: |
          # Install Chrome using offline installer for reliability
          $chromeInstaller = "chrome_installer.exe"
          $downloadUrl = "https://dl.google.com/chrome/install/latest/chrome_installer.exe"
          
          # Download Chrome installer
          try {
              Invoke-WebRequest -Uri $downloadUrl -OutFile $chromeInstaller -ErrorAction Stop
              Write-Host "Chrome installer downloaded successfully"
          } catch {
              Write-Warning "Failed to download Chrome installer: $($_.Exception.Message)"
          }
          
          # Install Chrome
          if (Test-Path $chromeInstaller) {
              Write-Host "Installing Google Chrome..."
              Start-Process -FilePath $chromeInstaller -ArgumentList "/silent /install" -Wait
              
              # Wait for Chrome to be properly installed
              Start-Sleep -Seconds 30
              
              # Set Chrome as default browser using registry
              $chromePath = "${env:ProgramFiles(x86)}\Google\Chrome\Application\chrome.exe"
              if (Test-Path $chromePath) {
                  # Set Chrome as default for HTTP and HTTPS
                  reg add "HKCU\Software\Microsoft\Windows\Shell\Associations\UrlAssociations\http\UserChoice" /v ProgId /d "ChromeHTML" /f
                  reg add "HKCU\Software\Microsoft\Windows\Shell\Associations\UrlAssociations\https\UserChoice" /v ProgId /d "ChromeHTML" /f
                  Write-Host "Google Chrome set as default browser"
              } else {
                  Write-Warning "Chrome installation may have failed, path not found: $chromePath"
              }
          } else {
              Write-Warning "Chrome installer not found."
          }

      # --- Install jq for JSON parsing ---
      - name: Install jq
        run: |
          # Create the directory first, then download jq
          mkdir -p /usr/local/bin
          curl -L -o /usr/local/bin/jq.exe https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe
          chmod +x /usr/local/bin/jq.exe
        shell: bash

      # --- Ngrok Tunneling ---
      - name: Setup Ngrok Tunnel
        shell: bash
        run: |
          REGION="${{ github.event.inputs.region }}"
          AUTH_TOKEN="${{ secrets.NGROK_AUTH_TOKEN }}"
          NGROK_LOG="ngrok.log"
          CONFIG_FILE="ngrok.yml"
          PORT="3389"

          # Create ngrok configuration file
          echo "version: \"2\"" > $CONFIG_FILE
          echo "authtoken: $AUTH_TOKEN" >> $CONFIG_FILE
          echo "region: $REGION" >> $CONFIG_FILE

          echo "Installing ngrok..."
          # Manual download for Windows
          curl -sL https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -o ngrok.zip
          unzip -o ngrok.zip

          echo "Starting ngrok tunnel on port $PORT..."
          # For Windows, use PowerShell to start ngrok
          pwsh -Command "Start-Process -NoNewWindow -FilePath 'ngrok.exe' -ArgumentList 'tcp $PORT --config $CONFIG_FILE --log $NGROK_LOG'"

          echo "Waiting for ngrok to start..."
          sleep 15
          
          for i in {1..5}; do
            TUNNEL_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url // empty')
            if [ -n "$TUNNEL_URL" ]; then
              break
            fi
            echo "Attempt $i: Tunnel not ready yet, waiting..."
            sleep 5
          done

          if [ -z "$TUNNEL_URL" ]; then
            echo "::error::Failed to get ngrok tunnel info after multiple attempts."
            echo "Ngrok log content:"
            cat "$NGROK_LOG" 2>/dev/null || echo "No ngrok log found"
            exit 1
          fi

          RDP_ADDRESS=$(echo "$TUNNEL_URL" | sed 's|tcp://||' | cut -d: -f1)
          RDP_PORT=$(echo "$TUNNEL_URL" | sed 's|tcp://||' | cut -d: -f2)
          echo "RDP_ADDRESS=$RDP_ADDRESS" >> $GITHUB_ENV
          echo "RDP_PORT=$RDP_PORT" >> $GITHUB_ENV
          echo "Tunnel established successfully: $TUNNEL_URL"

      # --- Display Connection Info ---
      - name: Display Connection Details
        run: |
          echo "ðŸŽ¯ CONNECTION DETAILS ðŸŽ¯"
          echo "=========================================="
          echo "OS: Windows"
          echo "Protocol: RDP (Use Remote Desktop Connection)"
          echo "Port: 3389"
          echo "Address: ${{ env.RDP_ADDRESS }}"
          echo "Port: ${{ env.RDP_PORT }}"
          echo "Username: ${{ github.event.inputs.username }}"
          echo "Password: ${{ env.GENERATED_PASSWORD }}"
          echo "=========================================="
          echo "Connection string: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
        shell: bash

      # --- Keep Alive ---
      - name: Keep Workflow Alive
        shell: bash
        run: |
          echo "Remote desktop session is now active!"
          echo "The workflow will remain running for ${{ github.event.inputs.timeout }} minutes."
          echo "Press Ctrl+C in the workflow logs to terminate the session early."

          # Main loop
          while true; do
            echo "[$(date)] Session active - Address: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
            sleep 60
          done
