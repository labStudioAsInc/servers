name: Remote Desktop

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Select Operating System (older versions available)'
        required: true
        type: choice
        options:
        - windows-latest
        - windows-2019
        - ubuntu-latest
        - ubuntu-22.04
        - macos-latest
        - macos-14
        default: 'windows-latest'
      region:
        description: 'Select Ngrok Tunnel Region'
        required: true
        type: choice
        options:
        - "us" # United States (Ohio)
        - "eu" # Europe (Frankfurt)
        - "ap" # Asia/Pacific (Singapore)
        - "au" # Australia (Sydney)
        - "sa" # South America (SÃ£o Paulo)
        - "jp" # Japan (Tokyo)
        - "in" # India (Mumbai)
        default: 'in'
      timeout:
        description: 'Session Timeout (minutes)'
        required: true
        type: number
        default: 360
      username:
        description: 'Custom Username'
        required: true
        type: string
        default: 'Ashik'
      password:
        description: 'Custom Password'
        required: true
        type: string
        default: 'Ashik2006.pc'

jobs:
  rdp-session:
    runs-on: ${{ github.event.inputs.os }}
    timeout-minutes: ${{ github.event.inputs.timeout }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- Windows Setup ---
      - name: Configure RDP on Windows
        if: runner.os == 'Windows'
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create User on Windows
        if: runner.os == 'Windows'
        run: |
          $securePass = ConvertTo-SecureString "${{ github.event.inputs.password }}" -AsPlainText -Force
          New-LocalUser -Name "${{ github.event.inputs.username }}" -Password $securePass
          Add-LocalGroupMember -Group "Administrators" -Member "${{ github.event.inputs.username }}"

      # --- Linux (Ubuntu) Setup ---
      - name: Configure Desktop and RDP on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ubuntu-desktop xrdp
          sudo systemctl enable --now xrdp
          sudo ufw allow 3389

      - name: Create User on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo useradd -m -s /bin/bash ${{ github.event.inputs.username }}
          echo "${{ github.event.inputs.username }}:${{ github.event.inputs.password }}" | sudo chpasswd
          sudo adduser ${{ github.event.inputs.username }} sudo
          
      # --- macOS Setup (Note: RDP setup is more complex and may require additional steps) ---
      - name: Enable Remote Management on macOS
        if: runner.os == 'macOS'
        run: |
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -users "${{ github.event.inputs.username }}" -privs -all -restart -agent -menu
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -configure -allowAccessFor -allUsers -privs -all

      - name: Create User on macOS
        if: runner.os == 'macOS'
        run: |
          sudo dscl . -create /Users/${{ github.event.inputs.username }}
          sudo dscl . -create /Users/${{ github.event.inputs.username }} UserShell /bin/bash
          sudo dscl . -create /Users/${{ github.event.inputs.username }} RealName "${{ github.event.inputs.username }}"
          sudo dscl . -create /Users/${{ github.event.inputs.username }} UniqueID "1001"
          sudo dscl . -create /Users/${{ github.event.inputs.username }} PrimaryGroupID "20"
          sudo dscl . -create /Users/${{ github.event.inputs.username }} NFSHomeDirectory /Users/${{ github.event.inputs.username }}
          sudo dscl . -passwd /Users/${{ github.event.inputs.username }} "${{ github.event.inputs.password }}"
          sudo dscl . -append /Groups/admin GroupMembership ${{ github.event.inputs.username }}
          
      # --- Ngrok Tunneling (Cross-Platform) ---
      - name: Setup Ngrok Tunnel
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "$env:TEMP\ngrok.zip"
            Expand-Archive -Path "$env:TEMP\ngrok.zip" -DestinationPath "$env:TEMP\ngrok" -Force
            Start-Process -FilePath "$env:TEMP\ngrok\ngrok.exe" -ArgumentList "tcp", "3389", "--authtoken", "${{ secrets.NGROK_AUTH_TOKEN }}", "--region", "${{ github.event.inputs.region }}" -WindowStyle Hidden
          elif [ "$RUNNER_OS" == "Linux" ]; then
            curl -s https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz | sudo tar -C /usr/local/bin -xz
            ngrok tcp 3389 --authtoken "${{ secrets.NGROK_AUTH_TOKEN }}" --region "${{ github.event.inputs.region }}" &> /dev/null &
          elif [ "$RUNNER_OS" == "macOS" ]; then
            curl -s https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-amd64.zip -o ngrok.zip
            unzip ngrok.zip
            ./ngrok tcp 3389 --authtoken "${{ secrets.NGROK_AUTH_TOKEN }}" --region "${{ github.event.inputs.region }}" &> /dev/null &
          fi
          
          sleep 8
          
          curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' > ngrok_url.txt
          
          RDP_URL=$(cat ngrok_url.txt)
          RDP_ADDRESS=$(echo $RDP_URL | sed 's|tcp://||' | sed -E 's|:[0-9]+||')
          RDP_PORT=$(echo $RDP_URL | sed -E 's|.*:||')
          
          echo "RDP_ADDRESS=$RDP_ADDRESS" >> $GITHUB_ENV
          echo "RDP_PORT=$RDP_PORT" >> $GITHUB_ENV
        shell: bash

      # --- Display Connection Info ---
      - name: Display Connection Details
        run: |
          echo "ðŸŽ¯ RDP CONNECTION DETAILS ðŸŽ¯"
          echo "=========================================="
          echo "OS: ${{ github.event.inputs.os }}"
          echo "Address: ${{ env.RDP_ADDRESS }}"
          echo "Port: ${{ env.RDP_PORT }}"
          echo "Username: ${{ github.event.inputs.username }}"
          echo "Password: ${{ github.event.inputs.password }}"
          echo "=========================================="
          echo "In your Remote Desktop client, use:"
          echo "Computer: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
          echo "=========================================="
        shell: bash
        
      # --- Maintain Connection ---
      - name: Keep Workflow Alive
        run: |
          while (true) {
              Write-Host "[$(Get-Date)] RDP Ready - Connect to: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
              Start-Sleep -Seconds 60
          }
        shell: pwsh