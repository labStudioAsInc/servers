name: Customizable Remote Desktop

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Select Operating System'
        required: true
        type: choice
        options:
        - windows-latest
        - windows-2019
        - ubuntu-latest
        - ubuntu-22.04
        - macos-latest
        - macos-14
        default: 'windows-latest'
      region:
        description: 'Select Ngrok Tunnel Region'
        required: true
        type: choice
        options:
        - "us" # United States (Ohio)
        - "eu" # Europe (Frankfurt)
        - "ap" # Asia/Pacific (Singapore)
        - "au" # Australia (Sydney)
        - "sa" # South America (SÃ£o Paulo)
        - "jp" # Japan (Tokyo)
        - "in" # India (Mumbai)
        default: 'in'
      timeout:
        description: 'Session Timeout (minutes, max 360)'
        required: true
        type: string
        default: '360'
      username:
        description: 'Custom Username'
        required: true
        type: string
        default: 'Ashik'

jobs:
  rdp-session:
    runs-on: ${{ github.event.inputs.os }}
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- Windows Setup ---
      - name: Configure RDP & User on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $password = -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 20 | ForEach-Object { [char]$_ })
          echo "GENERATED_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          $securePass = ConvertTo-SecureString "$password" -AsPlainText -Force
          New-LocalUser -Name "${{ github.event.inputs.username }}" -Password $securePass -FullName "${{ github.event.inputs.username }}"
          Add-LocalGroupMember -Group "Administrators" -Member "${{ github.event.inputs.username }}"

      # --- Linux (Ubuntu) Setup ---
      - name: Configure RDP & User on Ubuntu
        if: runner.os == 'Linux'
        run: |
          PASSWORD=$(openssl rand -base64 16)
          echo "GENERATED_PASSWORD=$PASSWORD" >> $GITHUB_ENV
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ubuntu-desktop xrdp
          sudo systemctl enable --now xrdp
          sudo ufw allow 3389
          sudo useradd -m -s /bin/bash "${{ github.event.inputs.username }}"
          echo "${{ github.event.inputs.username }}:$PASSWORD" | sudo chpasswd
          sudo adduser "${{ github.event.inputs.username }}" sudo

      # --- macOS Setup ---
      - name: Create User & Enable VNC on macOS
        if: runner.os == 'macOS'
        run: |
          PASSWORD=$(openssl rand -base64 16)
          echo "GENERATED_PASSWORD=$PASSWORD" >> $GITHUB_ENV
          sudo sysadminctl -addUser "${{ github.event.inputs.username }}" -password "$PASSWORD"
          sudo dseditgroup -o edit -a "${{ github.event.inputs.username }}" -t user admin
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -users "${{ github.event.inputs.username }}" -privs -all -restart -agent -menu

      # --- Install jq for JSON parsing ---
      - name: Install jq
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update && sudo apt-get install -y jq
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install jq
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install jq -y
          fi
        shell: bash

      # --- Ngrok Tunneling (Fixed Universal Version) ---
      - name: Setup Ngrok Tunnel
        shell: bash
        run: |
          REGION="${{ github.event.inputs.region }}"
          AUTH_TOKEN="${{ secrets.NGROK_AUTH_TOKEN }}"
          NGROK_LOG="ngrok.log"
          PORT="3389"

          # Download ngrok based on OS
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            curl -s https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz | tar -xvz
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            PORT="5900"
            curl -sL https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-amd64.zip -o ngrok.zip
            unzip -o ngrok.zip
            # Remove all extended attributes (including quarantine)
            xattr -c ngrok
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            curl -sL https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -o ngrok.zip
            unzip -o ngrok.zip
          fi

          # Ensure ngrok is executable (non-Windows)
          if [[ "$RUNNER_OS" != "Windows" ]]; then
            chmod +x ngrok
          fi

          # Start ngrok tunnel
          echo "Starting ngrok tunnel on port $PORT..."
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            start /B ngrok.exe tcp $PORT --authtoken "$AUTH_TOKEN" --region "$REGION" --log "$NGROK_LOG"
          else
            nohup ./ngrok tcp $PORT --authtoken "$AUTH_TOKEN" --region "$REGION" --log "$NGROK_LOG" > /dev/null 2>&1 &
          fi

          # Wait and check tunnel connection
          echo "Waiting for ngrok to start..."
          sleep 15
          
          # Try multiple times to get tunnel URL
          for i in {1..5}; do
            TUNNEL_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url // empty')
            if [ -n "$TUNNEL_URL" ]; then
              break
            fi
            echo "Attempt $i: Tunnel not ready yet, waiting..."
            sleep 5
          done

          if [ -z "$TUNNEL_URL" ]; then
            echo "::error::Failed to get ngrok tunnel info after multiple attempts."
            echo "Ngrok log content:"
            cat "$NGROK_LOG" 2>/dev/null || echo "No ngrok log found"
            echo "Checking processes:"
            ps aux || tasklist
            exit 1
          fi

          # Extract connection details
          RDP_ADDRESS=$(echo "$TUNNEL_URL" | sed 's|tcp://||' | cut -d: -f1)
          RDP_PORT=$(echo "$TUNNEL_URL" | sed 's|tcp://||' | cut -d: -f2)
          echo "RDP_ADDRESS=$RDP_ADDRESS" >> $GITHUB_ENV
          echo "RDP_PORT=$RDP_PORT" >> $GITHUB_ENV
          echo "Tunnel established successfully: $TUNNEL_URL"

      # --- Display Connection Info ---
      - name: Display Connection Details
        run: |
          echo "ðŸŽ¯ CONNECTION DETAILS ðŸŽ¯"
          echo "=========================================="
          echo "OS: ${{ github.event.inputs.os }}"
          if [[ "${{ github.event.inputs.os }}" == macos* ]]; then
            echo "Protocol: VNC (Use a VNC Viewer like RealVNC or TightVNC)"
            echo "Port: 5900"
          else
            echo "Protocol: RDP (Use Remote Desktop Connection)"
            echo "Port: 3389"
          fi
          echo "Address: ${{ env.RDP_ADDRESS }}"
          echo "Port: ${{ env.RDP_PORT }}"
          echo "Username: ${{ github.event.inputs.username }}"
          echo "Password: ${{ env.GENERATED_PASSWORD }}"
          echo "=========================================="
          echo "Connection string: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
        shell: bash

      # --- Maintain Connection ---
      - name: Keep Workflow Alive
        run: |
          echo "Remote desktop session is now active!"
          echo "The workflow will remain running for ${{ github.event.inputs.timeout }} minutes."
          echo "Press Ctrl+C in the workflow logs to terminate the session early."
          
          # Different keep-alive approaches per OS
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Windows
            while ($true) {
              Write-Host "[$(Get-Date)] Session active - Address: $env:RDP_ADDRESS:$env:RDP_PORT"
              Start-Sleep -Seconds 60
            }
          else
            # Linux/macOS
            while true; do
              echo "[$(date)] Session active - Address: $RDP_ADDRESS:$RDP_PORT"
              sleep 60
            done
          fi
        shell: bash