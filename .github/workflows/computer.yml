name: Remote Desktop

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Select Operating System'
        required: true
        type: choice
        options:
        - windows-latest
        - windows-2019
        - ubuntu-latest
        - ubuntu-22.04
        - macos-latest
        - macos-14
        default: 'windows-latest'
      region:
        description: 'Select Ngrok Tunnel Region'
        required: true
        type: choice
        options:
        - "us" # United States (Ohio)
        - "eu" # Europe (Frankfurt)
        - "ap" # Asia/Pacific (Singapore)
        - "au" # Australia (Sydney)
        - "sa" # South America (SÃ£o Paulo)
        - "jp" # Japan (Tokyo)
        - "in" # India (Mumbai)
        default: 'in'
      timeout:
        description: 'Session Timeout (minutes, max 360)'
        required: true
        type: string
        default: '360'
      username:
        description: 'Custom Username'
        required: true
        type: string
        default: 'Ashik'

jobs:
  rdp-session:
    runs-on: ${{ github.event.inputs.os }}
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- Windows Setup ---
      - name: Configure RDP & User on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $password = -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 20 | ForEach-Object { [char]$_ })
          echo "GENERATED_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          
          $securePass = ConvertTo-SecureString "$password" -AsPlainText -Force
          New-LocalUser -Name "${{ github.event.inputs.username }}" -Password $securePass -FullName "${{ github.event.inputs.username }}"
          Add-LocalGroupMember -Group "Administrators" -Member "${{ github.event.inputs.username }}"

      # --- Linux (Ubuntu) Setup ---
      - name: Configure RDP & User on Ubuntu
        if: runner.os == 'Linux'
        run: |
          PASSWORD=$(openssl rand -base64 16)
          echo "GENERATED_PASSWORD=$PASSWORD" >> $GITHUB_ENV
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ubuntu-desktop xrdp
          sudo systemctl enable --now xrdp
          sudo ufw allow 3389
          sudo useradd -m -s /bin/bash "${{ github.event.inputs.username }}"
          echo "${{ github.event.inputs.username }}:$PASSWORD" | sudo chpasswd
          sudo adduser "${{ github.event.inputs.username }}" sudo

      # --- macOS Setup ---
      - name: Create User & Enable Remote Management on macOS
        if: runner.os == 'macOS'
        run: |
          PASSWORD=$(openssl rand -base64 16)
          echo "GENERATED_PASSWORD=$PASSWORD" >> $GITHUB_ENV
          sudo dscl . -create "/Users/${{ github.event.inputs.username }}"
          sudo dscl . -passwd "/Users/${{ github.event.inputs.username }}" "$PASSWORD"
          sudo dscl . -append /Groups/admin GroupMembership "${{ github.event.inputs.username }}"
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -users "${{ github.event.inputs.username }}" -privs -all -restart -agent -menu

      # --- Ngrok Tunneling (Final Version) ---
      - name: Setup Ngrok Tunnel
        shell: pwsh
        run: |
          $region = "${{ github.event.inputs.region }}"
          $authToken = "${{ secrets.NGROK_AUTH_TOKEN }}"
          $ngrokLog = "ngrok.log"

          if ($env:RUNNER_OS -eq "Windows") {
              Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "ngrok.zip"
              Expand-Archive ngrok.zip -DestinationPath .
              $ngrokExe = ".\ngrok.exe"
          } elseif ($env:RUNNER_OS -eq "Linux") {
              Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz" -OutFile "ngrok.tgz"
              tar -xvzf ngrok.tgz
              $ngrokExe = "./ngrok"
          } elseif ($env:RUNNER_OS -eq "macOS") {
              Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-amd64.zip" -OutFile "ngrok.zip"
              unzip ngrok.zip
              $ngrokExe = "./ngrok"
          }
          
          # --- KEY FIX: Add execute permissions on Linux/macOS ---
          if ($env:RUNNER_OS -ne "Windows") {
              chmod +x $ngrokExe
          }
          
          Write-Host "Starting ngrok tunnel..."
          if ($env:RUNNER_OS -eq "Windows") {
              Start-Process -FilePath $ngrokExe -ArgumentList "tcp", "3389", "--authtoken", $authToken, "--region", $region, "--log", $ngrokLog
          } else {
              ./$ngrokExe tcp 3389 --authtoken $authToken --region $region --log $ngrokLog &
          }

          Write-Host "Waiting for ngrok API..."
          $maxRetries = 20; $retryDelay = 3; $tunnelInfo = $null
          for ($i=1; $i -le $maxRetries; $i++) {
              try {
                  $tunnelInfo = Invoke-WebRequest -Uri "http://localhost:4040/api/tunnels" -UseBasicParsing | ConvertFrom-Json
                  if ($tunnelInfo.tunnels.Count -gt 0 -and $tunnelInfo.tunnels[0].public_url) { break }
              } catch { 
                  Write-Host "Connection attempt $i failed. Retrying..."
                  Start-Sleep -Seconds $retryDelay 
              }
          }

          if (-not $tunnelInfo -or $tunnelInfo.tunnels.Count -eq 0) {
              Write-Error "Failed to get ngrok tunnel info."
              Write-Host "Dumping ngrok log for debugging:"
              Get-Content $ngrokLog
              exit 1
          }

          $publicUrl = $tunnelInfo.tunnels[0].public_url
          $rdpAddress = ($publicUrl -split '//')[1].Split(':')[0]
          $rdpPort = ($publicUrl -split ':')[-1]
          
          "RDP_ADDRESS=$rdpAddress" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RDP_PORT=$rdpPort" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # --- Display Connection Info ---
      - name: Display Connection Details
        run: |
          echo "ðŸŽ¯ RDP CONNECTION DETAILS ðŸŽ¯"
          echo "=========================================="
          echo "OS: ${{ github.event.inputs.os }}"
          echo "Computer: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
          echo "Username: ${{ github.event.inputs.username }}"
          echo "Password: ${{ env.GENERATED_PASSWORD }}"
          echo "=========================================="
        shell: bash
        
      # --- Maintain Connection ---
      - name: Keep Workflow Alive
        run: |
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Ready. Connection details above."
              Start-Sleep -Seconds 60
          }
        shell: pwsh