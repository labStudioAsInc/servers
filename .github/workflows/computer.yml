name: Persistent RDP

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Select Operating System'
        required: true
        type: choice
        options:
        - windows-latest
        - windows-2019
        - ubuntu-latest
        - ubuntu-22.04
        - macos-latest
        - macos-14
        default: 'windows-latest'
      region:
        description: 'Select Ngrok Tunnel Region'
        required: true
        type: choice
        options:
        - "us"
        - "eu"
        - "ap"
        - "au"
        - "sa"
        - "jp"
        - "in"
        default: 'in'
      timeout:
        description: 'Session Timeout (minutes, max 360)'
        required: true
        type: string
        default: '360'
      username:
        description: 'Custom Username'
        required: true
        type: string
        default: 'Ashik'
      backup_enabled:
        description: 'Enable Google Drive Backup'
        required: true
        type: choice
        options:
        - 'true'
        - 'false'
        default: 'true'

env:
  BACKUP_DIR: "$HOME/cloud-backup"
  SYNC_DIR: "$HOME/persistent-data"
  GDRIVE_CREDENTIALS: "service_account.json"

jobs:
  rdp-session:
    runs-on: ${{ github.event.inputs.os }}
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- Create directories for persistence ---
      - name: Create persistent directories
        shell: bash
        run: |
          mkdir -p "${{ env.BACKUP_DIR }}" "${{ env.SYNC_DIR }}"
          echo "Persistent directories created"

      # --- Install Google Drive CLI and dependencies ---
      - name: Install gdrive CLI and dependencies
        if: github.event.inputs.backup_enabled == 'true'
        shell: bash
        run: |
          echo "Installing Google Drive CLI..."
          
          # Install gdrive CLI based on OS
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            curl -L https://github.com/glotlabs/gdrive/releases/download/3.9.0/gdrive_linux-x64 -o gdrive
            chmod +x gdrive
            sudo mv gdrive /usr/local/bin/
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            curl -L https://github.com/glotlabs/gdrive/releases/download/3.9.0/gdrive_darwin-x64 -o gdrive
            chmod +x gdrive
            sudo mv gdrive /usr/local/bin/
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            curl -L https://github.com/glotlabs/gdrive/releases/download/3.9.0/gdrive_windows-x64.exe -o gdrive.exe
            mv gdrive.exe /usr/bin/
          fi
          
          echo "Google Drive CLI installed successfully"

      # --- Setup Google Drive authentication ---
      - name: Setup Google Drive authentication
        if: github.event.inputs.backup_enabled == 'true'
        shell: bash
        run: |
          echo "${{ secrets.GDRIVE_SERVICE_ACCOUNT_KEY }}" > "${{ env.GDRIVE_CREDENTIALS }}"
          echo "Google Drive authentication configured"

      # --- Restore from Google Drive ---
      - name: Restore data from Google Drive
        if: github.event.inputs.backup_enabled == 'true'
        shell: bash
        run: |
          echo "Checking for existing backups..."
          
          # List files and find the latest backup
          FILE_INFO=$(gdrive --service-account "${{ env.GDRIVE_CREDENTIALS }}" list --query "name contains '${{ github.event.inputs.username }}-backup'" --order createdTime | tail -n 1)
          
          if [ -n "$FILE_INFO" ]; then
            FILE_ID=$(echo "$FILE_INFO" | awk '{print $1}')
            FILE_NAME=$(echo "$FILE_INFO" | awk '{for(i=2;i<=NF-3;i++) printf $i" "; print ""}')
            
            echo "Restoring backup: $FILE_NAME (ID: $FILE_ID)"
            gdrive --service-account "${{ env.GDRIVE_CREDENTIALS }}" download --force --path "${{ env.BACKUP_DIR }}/restored_backup.tar.gz" "$FILE_ID"
            
            # Extract the backup
            tar -xzf "${{ env.BACKUP_DIR }}/restored_backup.tar.gz" -C "${{ env.SYNC_DIR }}"
            echo "Backup restored successfully!"
          else
            echo "No existing backup found. Starting fresh."
          fi

      # --- Windows Setup ---
      - name: Configure RDP & User on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $password = -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 20 | ForEach-Object { [char]$_ })
          echo "GENERATED_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          $securePass = ConvertTo-SecureString "$password" -AsPlainText -Force
          New-LocalUser -Name "${{ github.event.inputs.username }}" -Password $securePass -FullName "${{ github.event.inputs.username }}"
          Add-LocalGroupMember -Group "Administrators" -Member "${{ github.event.inputs.username }}"

      # --- Linux (Ubuntu) Setup ---
      - name: Configure RDP & User on Ubuntu
        if: runner.os == 'Linux'
        run: |
          PASSWORD=$(openssl rand -base64 16)
          echo "GENERATED_PASSWORD=$PASSWORD" >> $GITHUB_ENV
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ubuntu-desktop xrdp
          sudo systemctl enable --now xrdp
          sudo ufw allow 3389
          sudo useradd -m -s /bin/bash "${{ github.event.inputs.username }}"
          echo "${{ github.event.inputs.username }}:$PASSWORD" | sudo chpasswd
          sudo adduser "${{ github.event.inputs.username }}" sudo

      # --- macOS Setup ---
      - name: Create User & Enable VNC on macOS
        if: runner.os == 'macOS'
        run: |
          PASSWORD=$(openssl rand -base64 16)
          echo "GENERATED_PASSWORD=$PASSWORD" >> $GITHUB_ENV
          sudo sysadminctl -addUser "${{ github.event.inputs.username }}" -password "$PASSWORD"
          sudo dseditgroup -o edit -a "${{ github.event.inputs.username }}" -t user admin
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -users "${{ github.event.inputs.username }}" -privs -all -restart -agent -menu

      # --- Install jq for JSON parsing ---
      - name: Install jq
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update && sudo apt-get install -y jq
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install jq
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install jq -y
          fi
        shell: bash

      # --- Ngrok Tunneling ---
      - name: Setup Ngrok Tunnel
        shell: bash
        run: |
          REGION="${{ github.event.inputs.region }}"
          AUTH_TOKEN="${{ secrets.NGROK_AUTH_TOKEN }}"
          NGROK_LOG="ngrok.log"
          PORT="3389"

          if [[ "$RUNNER_OS" == "Linux" ]]; then
            curl -s https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz | tar -xvz
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            PORT="5900"
            curl -sL https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-amd64.zip -o ngrok.zip
            unzip -o ngrok.zip
            xattr -c ngrok
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            curl -sL https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -o ngrok.zip
            unzip -o ngrok.zip
          fi

          if [[ "$RUNNER_OS" != "Windows" ]]; then
            chmod +x ngrok
          fi

          echo "Starting ngrok tunnel on port $PORT..."
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            Start-Process -NoNewWindow -FilePath "ngrok.exe" -ArgumentList "tcp $PORT --authtoken $AUTH_TOKEN --region $REGION --log $NGROK_LOG"
          else
            nohup ./ngrok tcp $PORT --authtoken "$AUTH_TOKEN" --region "$REGION" --log "$NGROK_LOG" > /dev/null 2>&1 &
          fi

          echo "Waiting for ngrok to start..."
          sleep 15
          
          for i in {1..5}; do
            TUNNEL_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url // empty')
            if [ -n "$TUNNEL_URL" ]; then
              break
            fi
            echo "Attempt $i: Tunnel not ready yet, waiting..."
            sleep 5
          done

          if [ -z "$TUNNEL_URL" ]; then
            echo "::error::Failed to get ngrok tunnel info after multiple attempts."
            echo "Ngrok log content:"
            cat "$NGROK_LOG" 2>/dev/null || echo "No ngrok log found"
            exit 1
          fi

          RDP_ADDRESS=$(echo "$TUNNEL_URL" | sed 's|tcp://||' | cut -d: -f1)
          RDP_PORT=$(echo "$TUNNEL_URL" | sed 's|tcp://||' | cut -d: -f2)
          echo "RDP_ADDRESS=$RDP_ADDRESS" >> $GITHUB_ENV
          echo "RDP_PORT=$RDP_PORT" >> $GITHUB_ENV
          echo "Tunnel established successfully: $TUNNEL_URL"

      # --- Display Connection Info ---
      - name: Display Connection Details
        run: |
          echo "ðŸŽ¯ CONNECTION DETAILS ðŸŽ¯"
          echo "=========================================="
          echo "OS: ${{ github.event.inputs.os }}"
          if [[ "${{ github.event.inputs.os }}" == macos* ]]; then
            echo "Protocol: VNC (Use a VNC Viewer like RealVNC or TightVNC)"
            echo "Port: 5900"
          else
            echo "Protocol: RDP (Use Remote Desktop Connection)"
            echo "Port: 3389"
          fi
          echo "Address: ${{ env.RDP_ADDRESS }}"
          echo "Port: ${{ env.RDP_PORT }}"
          echo "Username: ${{ github.event.inputs.username }}"
          echo "Password: ${{ env.GENERATED_PASSWORD }}"
          echo "Google Drive Backup: ${{ github.event.inputs.backup_enabled }}"
          echo "=========================================="
          echo "Connection string: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
        shell: bash

      # --- Keep Alive with Periodic Backup ---
      - name: Keep Workflow Alive with Periodic Backup
        shell: bash
        run: |
          # Function to backup to Google Drive
          backup_to_gdrive() {
            if [ "${{ github.event.inputs.backup_enabled }}" != "true" ]; then
              return 0
            fi
            
            echo "Starting backup to Google Drive..."
            BACKUP_FILE="${{ env.BACKUP_DIR }}/backup-$(date +%Y%m%d-%H%M%S).tar.gz"
            
            # Create backup
            tar -czf "$BACKUP_FILE" -C "${{ env.SYNC_DIR }}" .
            
            # Upload to Google Drive
            UPLOAD_RESULT=$(gdrive --service-account "${{ env.GDRIVE_CREDENTIALS }}" upload --name "${{ github.event.inputs.username }}-backup-$(date +%Y%m%d-%H%M%S).tar.gz" "$BACKUP_FILE")
            
            if [ $? -eq 0 ]; then
              echo "Backup completed successfully: $UPLOAD_RESULT"
              # Keep only the latest 3 backups
              gdrive --service-account "${{ env.GDRIVE_CREDENTIALS }}" list --query "name contains '${{ github.event.inputs.username }}-backup'" --order createdTime | tail -n +4 | awk '{print $1}' | xargs -I {} gdrive --service-account "${{ env.GDRIVE_CREDENTIALS }}" delete {}
            else
              echo "Backup failed with status: $?"
            fi
          }

          # Set up signal handling for clean backup on exit
          cleanup() {
            echo "Workflow ending, performing final backup..."
            backup_to_gdrive
            exit 0
          }
          trap cleanup EXIT INT TERM

          # Initial backup
          backup_to_gdrive
          
          echo "Remote desktop session is now active!"
          echo "The workflow will remain running for ${{ github.event.inputs.timeout }} minutes."
          echo "Auto-backup to Google Drive is scheduled every 30 minutes."
          echo "Press Ctrl+C in the workflow logs to terminate the session early with a final backup."

          # Main loop with periodic backups
          COUNT=0
          while true; do
            echo "[$(date)] Session active - Address: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
            sleep 60
            COUNT=$((COUNT + 1))
            
            # Backup every 30 minutes
            if [ $((COUNT % 30)) -eq 0 ]; then
              backup_to_gdrive
            fi
          done

      # --- Final Backup on Completion ---
      - name: Final Backup
        if: always() && github.event.inputs.backup_enabled == 'true'
        shell: bash
        run: |
          echo "Performing final backup..."
          BACKUP_FILE="${{ env.BACKUP_DIR }}/backup-$(date +%Y%m%d-%H%M%S).tar.gz"
          
          tar -czf "$BACKUP_FILE" -C "${{ env.SYNC_DIR }}" .
          
          gdrive --service-account "${{ env.GDRIVE_CREDENTIALS }}" upload --name "${{ github.event.inputs.username }}-backup-$(date +%Y%m%d-%H%M%S).tar.gz" "$BACKUP_FILE"
          
          echo "Final backup completed successfully!"