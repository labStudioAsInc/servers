name: Remote Desktop

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Select Operating System (older versions available)'
        required: true
        type: choice
        options:
        - windows-latest
        - windows-2019
        - ubuntu-latest
        - ubuntu-22.04
        - macos-latest
        - macos-14
        default: 'windows-latest'
      region:
        description: 'Select Ngrok Tunnel Region'
        required: true
        type: choice
        options:
        - "us" # United States (Ohio)
        - "eu" # Europe (Frankfurt)
        - "ap" # Asia/Pacific (Singapore)
        - "au" # Australia (Sydney)
        - "sa" # South America (SÃ£o Paulo)
        - "jp" # Japan (Tokyo)
        - "in" # India (Mumbai)
        default: 'in'
      timeout:
        description: 'Session Timeout (minutes, max 360)'
        required: true
        type: string # Changed from 'number' to 'string' to fix the error
        default: '360'
      username:
        description: 'Custom Username'
        required: true
        type: string
        default: 'Ashik'
      password:
        description: 'Custom Password'
        required: true
        type: string
        default: 'Ashik2006.pc'

jobs:
  rdp-session:
    runs-on: ${{ github.event.inputs.os }}
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout) }} # Use fromJSON to correctly interpret the number

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- Windows Setup ---
      - name: Configure RDP on Windows
        if: runner.os == 'Windows'
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create User on Windows
        if: runner.os == 'Windows'
        run: |
          $password = "${{ github.event.inputs.password }}"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "${{ github.event.inputs.username }}" -Password $securePass
          Add-LocalGroupMember -Group "Administrators" -Member "${{ github.event.inputs.username }}"

      # --- Linux (Ubuntu) Setup ---
      - name: Configure Desktop and RDP on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ubuntu-desktop xrdp
          sudo systemctl enable --now xrdp
          sudo ufw allow 3389

      - name: Create User on Ubuntu
        if: runner.os == 'Linux'
        run: |
          sudo useradd -m -s /bin/bash "${{ github.event.inputs.username }}"
          echo "${{ github.event.inputs.username }}:${{ github.event.inputs.password }}" | sudo chpasswd
          sudo adduser "${{ github.event.inputs.username }}" sudo

      # --- macOS Setup ---
      - name: Create User on macOS
        if: runner.os == 'macOS'
        run: |
          sudo dscl . -create "/Users/${{ github.event.inputs.username }}"
          sudo dscl . -create "/Users/${{ github.event.inputs.username }}" UserShell /bin/bash
          sudo dscl . -create "/Users/${{ github.event.inputs.username }}" RealName "${{ github.event.inputs.username }}"
          sudo dscl . -create "/Users/${{ github.event.inputs.username }}" UniqueID 1001
          sudo dscl . -create "/Users/${{ github.event.inputs.username }}" PrimaryGroupID 20
          sudo dscl . -create "/Users/${{ github.event.inputs.username }}" NFSHomeDirectory "/Users/${{ github.event.inputs.username }}"
          sudo dscl . -passwd "/Users/${{ github.event.inputs.username }}" "${{ github.event.inputs.password }}"
          sudo dscl . -append /Groups/admin GroupMembership "${{ github.event.inputs.username }}"
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -users "${{ github.event.inputs.username }}" -privs -all -restart -agent -menu

      # --- Ngrok Tunneling (Cross-Platform) ---
      - name: Setup Ngrok Tunnel
        shell: pwsh
        run: |
          $region = "${{ github.event.inputs.region }}"
          $authToken = "${{ secrets.NGROK_AUTH_TOKEN }}"
          
          if ($env:RUNNER_OS -eq "Windows") {
            Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "ngrok.zip"
            Expand-Archive ngrok.zip -DestinationPath .
            Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp", "3389", "--authtoken", $authToken, "--region", $region -WindowStyle Hidden
          } elseif ($env:RUNNER_OS -eq "Linux") {
            Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz" -OutFile "ngrok.tgz"
            tar -xvzf ngrok.tgz
            ./ngrok tcp 3389 --authtoken $authToken --region $region &
          } elseif ($env:RUNNER_OS -eq "macOS") {
            Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-amd64.zip" -OutFile "ngrok.zip"
            Expand-Archive ngrok.zip -DestinationPath .
            ./ngrok tcp 3389 --authtoken $authToken --region $region &
          }

          Start-Sleep -Seconds 8
          
          $tunnelInfo = Invoke-WebRequest -Uri "http://localhost:4040/api/tunnels" | ConvertFrom-Json
          $publicUrl = $tunnelInfo.tunnels[0].public_url
          $rdpAddress = ($publicUrl -split '//')[1] -split ':'[0]
          $rdpPort = ($publicUrl -split ':')[-1]
          
          "RDP_ADDRESS=$rdpAddress" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RDP_PORT=$rdpPort" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # --- Display Connection Info ---
      - name: Display Connection Details
        run: |
          echo "ðŸŽ¯ RDP CONNECTION DETAILS ðŸŽ¯"
          echo "=========================================="
          echo "OS: ${{ github.event.inputs.os }}"
          echo "Address: ${{ env.RDP_ADDRESS }}"
          echo "Port: ${{ env.RDP_PORT }}"
          echo "Username: ${{ github.event.inputs.username }}"
          echo "Password: ${{ github.event.inputs.password }}"
          echo "=========================================="
          echo "In your Remote Desktop client, use:"
          echo "Computer: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
          echo "=========================================="
        shell: bash
        
      # --- Maintain Connection ---
      - name: Keep Workflow Alive
        run: |
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Ready - Connect to: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
              Start-Sleep -Seconds 60
          }
        shell: pwsh