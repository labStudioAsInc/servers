name: Customizable Remote Desktop

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Select Operating System'
        required: true
        type: choice
        options:
        - windows-latest
        - windows-2019
        - ubuntu-latest
        - ubuntu-22.04
        - macos-latest
        - macos-14
        default: 'windows-latest'
      region:
        description: 'Select Ngrok Tunnel Region'
        required: true
        type: choice
        options:
        - "us" # United States (Ohio)
        - "eu" # Europe (Frankfurt)
        - "ap" # Asia/Pacific (Singapore)
        - "au" # Australia (Sydney)
        - "sa" # South America (SÃ£o Paulo)
        - "jp" # Japan (Tokyo)
        - "in" # India (Mumbai)
        default: 'in'
      timeout:
        description: 'Session Timeout (minutes, max 360)'
        required: true
        type: string
        default: '360'
      username:
        description: 'Custom Username'
        required: true
        type: string
        default: 'Ashik'

jobs:
  rdp-session:
    runs-on: ${{ github.event.inputs.os }}
    timeout-minutes: ${{ fromJSON(github.event.inputs.timeout) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # --- Windows Setup ---
      - name: Configure RDP & User on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $password = -join ((48..57) + (65..90) + (97..122) | Get-Random -Count 20 | ForEach-Object { [char]$_ })
          echo "GENERATED_PASSWORD=$password" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          $securePass = ConvertTo-SecureString "$password" -AsPlainText -Force
          New-LocalUser -Name "${{ github.event.inputs.username }}" -Password $securePass -FullName "${{ github.event.inputs.username }}"
          Add-LocalGroupMember -Group "Administrators" -Member "${{ github.event.inputs.username }}"

      # --- Linux (Ubuntu) Setup ---
      - name: Configure RDP & User on Ubuntu
        if: runner.os == 'Linux'
        run: |
          PASSWORD=$(openssl rand -base64 16)
          echo "GENERATED_PASSWORD=$PASSWORD" >> $GITHUB_ENV
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ubuntu-desktop xrdp
          sudo systemctl enable --now xrdp
          sudo ufw allow 3389
          sudo useradd -m -s /bin/bash "${{ github.event.inputs.username }}"
          echo "${{ github.event.inputs.username }}:$PASSWORD" | sudo chpasswd
          sudo adduser "${{ github.event.inputs.username }}" sudo

      # --- macOS Setup ---
      - name: Create User & Enable VNC on macOS
        if: runner.os == 'macOS'
        run: |
          PASSWORD=$(openssl rand -base64 16)
          echo "GENERATED_PASSWORD=$PASSWORD" >> $GITHUB_ENV
          sudo dscl . -create "/Users/${{ github.event.inputs.username }}"
          sudo dscl . -passwd "/Users/${{ github.event.inputs.username }}" "$PASSWORD"
          sudo dscl . -append /Groups/admin GroupMembership "${{ github.event.inputs.username }}"
          sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -users "${{ github.event.inputs.username }}" -privs -all -restart -agent -menu

      # --- Ngrok Tunneling (Final Universal Fix) ---
      - name: Setup Ngrok Tunnel
        shell: bash
        run: |
          # Set variables
          REGION="${{ github.event.inputs.region }}"
          AUTH_TOKEN="${{ secrets.NGROK_AUTH_TOKEN }}"
          NGROK_LOG="ngrok.log"
          PORT="3389" # Default RDP port

          # Download and extract ngrok based on OS
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            curl -s https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz | tar -xvz
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            PORT="5900" # macOS uses VNC on port 5900
            curl -sL https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-amd64.zip -o ngrok.zip
            unzip ngrok.zip
          fi
          
          # Apply macOS-specific fixes
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "Applying macOS security fixes..."
            # Fix 1: Remove quarantine attribute
            xattr -d com.apple.quarantine ngrok
          fi

          # Give execute permissions and start the tunnel
          chmod +x ngrok
          echo "Starting ngrok tunnel on port $PORT..."
          nohup ./ngrok tcp $PORT --authtoken "$AUTH_TOKEN" --region "$REGION" --log "$NGROK_LOG" &> /dev/null &

          # Wait for the API to be available
          echo "Waiting for ngrok API..."
          sleep 8 # Give it a few seconds to initialize
          TUNNEL_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url // empty')

          if [ -z "$TUNNEL_URL" ]; then
            echo "::error::Failed to get ngrok tunnel info."
            echo "Dumping ngrok log for debugging:"
            cat $NGROK_LOG || echo "ngrok.log not found."
            exit 1
          fi

          # Extract and set connection info
          RDP_ADDRESS=$(echo $TUNNEL_URL | sed 's|tcp://||' | cut -d: -f1)
          RDP_PORT=$(echo $TUNNEL_URL | sed 's|tcp://||' | cut -d: -f2)
          echo "RDP_ADDRESS=$RDP_ADDRESS" >> $GITHUB_ENV
          echo "RDP_PORT=$RDP_PORT" >> $GITHUB_ENV
          echo "Successfully retrieved tunnel information."

      # --- Display Connection Info ---
      - name: Display Connection Details
        run: |
          echo "ðŸŽ¯ CONNECTION DETAILS ðŸŽ¯"
          echo "=========================================="
          echo "OS: ${{ github.event.inputs.os }}"
          if [[ "${{ github.event.inputs.os }}" == macos* ]]; then
            echo "Protocol: VNC (Use a VNC Viewer like RealVNC or TightVNC)"
          else
            echo "Protocol: RDP (Use Remote Desktop Connection)"
          fi
          echo "Address: ${{ env.RDP_ADDRESS }}:${{ env.RDP_PORT }}"
          echo "Username: ${{ github.event.inputs.username }}"
          echo "Password: ${{ env.GENERATED_PASSWORD }}"
          echo "=========================================="
        shell: bash
        
      # --- Maintain Connection ---
      - name: Keep Workflow Alive
        run: |
          while ($true) {
            Write-Host "[$(Get-Date)] Session is active. Connection details are above."
            Start-Sleep -Seconds 60
          }
        shell: pwsh